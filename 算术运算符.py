# 运算符就是用于执行各种操作的特殊符号。

# 1、+ （加号）
# 加号的作用会根据操作数的类型不同而有所变化。
# 作用1：对于数值类型，执行加法操作。
print(1 + 2)  # 3

# 作用2：对于字符串类型，执行字符串连接的操作。可以把多个字符串（保存字符串的变量）拼接成一个新的字符串。
print('100' + '200')  # '100200'
x = 'hello'
print(x + 'world')  # helloworld

# 作用3：代表一个数是正数。
print(+3, 3)  # 3 3

# 2、- （减号）
# 作用1：对于数值类型，计算两个数的差值。
print(100 - 45)  # 55

# 作用2：标识一个数为负数。
print(-8)
print(12 - 16)
# -8
# -4

# 3、* （乘号）
# 作用1：对于数值类型，计算两个数的乘积。
print(7 * 8)  # 56

# 作用2：用于字符串的重复拼接（拼接成一个大的字符串）。
print(10 * 'hi')
# hihihihihihihihihihi


# 4、/  (除号)
# 作用：/用于执行标准的除法运算，结果总是返回一个浮点数，即使被除数能够被整除。
# 被除数 ÷ 除数 = 商
# 商通常被定义为一个整数部分和一个小数部分的组合。
# 注意点：除数不能为0，如果为0就会报错。任何数除以0都是没有意义的。
print(10 / 2)  # 5.0
print(10 / 3)  # 3.3333333333333335 默认保留十六
print(0 / 4)  # 0

# print(6 / 0)  # 报错
# ZeroDivisionError: division by zero

# 5、//  (取整除运算符 或 地板除法：得名于数学中的向下取整)
# 作用：计算两个数相除商的整数部分，即除法的结果是一个浮动小数，也会被向下取整到最接近的整数。
# 所以如果有小数会舍弃，不考虑四舍五入的原则。即结果是小于或等于数学上真实商的最大整数。
# 向下取整：找到不大于给定实数的最大整数。
print(10 // 2)  # 5
# 10/2: 5.0

print(10 // 3)  # 3
# 10/3：3.3333333333333335 -->向下取整 3

print(-10 // 3)  # -4

# -10/3:-3.3333333333333335 -->向下取整（不能大于-1，然后最接近的整数）-4

print(10 // -3)  # -4
# 10/-3:-3.3333333333333335 ->向下取整（不能大于-1，然后最接近的整数）-4

print(-10 // -3)  # 3
# -10/-3:3.3333333333333335 -->向下取整 3

print(10.0 // 2)  # 5.0 //两边如果有一个数是浮点数，结果一定是浮点数

# 6、% (取余运算符)
# 作用：计算两个数相除的余数
print(10 % 3)  # 1

# 7、** (幂运算符)
# 代表几次方的意思
# 作用：用来计算一个数的指数次幂，底数在前指数在后。
print(2 ** 3)  # 8 求的是2的三次方 2*2*2
print(10 ** 2)  # 100

# 注意！！：如果算术运算符两边的值，有一个为浮点数，结果也是浮点数
print(1 - 0.0)  # 1.0

# 例题1： 计算下列变量的运算结果
n = 3
n = n + 9  # 12
m = n - 5  # m-->7
n = n * 2  # 24
n = n / 6  # 4.0
m = m + (n // 2)  # 7+(4.0//2)  m-->9.0
m = m - (n % 1)  # 9.0-(4.0 % 1) m-->9.0
n = (n ** 2)  # 16.0

# print(m, n)


# 什么叫表达式？（一个能够计算并返回值的代码片段）
# 表达式可以简单到只是一个数字、一个变量，也可以复杂到包含多个运算符和操作数的组合，通过计算可以得到一个值。
# 操作数：可以是各种类型的数据（整型，浮点型，字符串...）、变量名，函数返回结果等。
# 运算符：用于指定操作数之间执行的操作。

# 56 常量表达式
# name='小明'  赋值表达式
# 100-89+34  算术表达式


# 优先级
# 在python中，我们需要遵守运算符优先级法则。所谓优先级，是指优先计算的顺序
# 在一个表达式中可能会包含多种运算符。

num1 = 1 + 2 * 3  # 7
num2 = (1 + 2) * 3  # 9
num3 = (1 + 3 ** 2) / 2  # 5.0
num4 = 17 // 5 % 5  # * / // % 优先级一样，从左到右计算
# 3 % 5 当被除数小于除数的时候，%的结果就是被除数
# 3

num5 = 16 % 3 // 5 ** 1  # 0

num6 = 2 ** 3 ** 2   # 如果表达式当中有多个**，从右到左计算
# 相当于 2 ** （3 ** 2）
# 512


# 注意事项：
# 1、在具有运算符的表达式中，程序会先执行具有较高优先级的运算,然后执行较低优先级的运算。
# 2、括号运算符具有最高的优先级，它可用于改变表达式的计算顺序。
# 3、如果运算符的优先级相同，就从左到右计算（** 运算符是从右至左计算）。
# 4、（）> 幂运算符 > 正号 负号 > * / // %  > + -

# + -
# 可以充当正数和负数 +4 -4
# 正号 负号都是一元运算符

# 在 Python中，一元运算符的优先级比大多数二元运算符都要高。


