# 格式化输出有常用的两个语法
# 1、使用%进行格式化输出

# 需求：要求输出'小明是班上学习最好的同学'这句话，要求使用到变量。
name = '小明'
# print(name, '是班上学习最好的同学')
# print(name + '是班上学习最好的同学')
# 小明 是班上学习最好的同学
# 小明是班上学习最好的同学

# 如果要求使用%进行格式化输出:
# print('%s是班上学习最好的同学')
# %s是班上学习最好的同学

print('%s是班上学习最好的同学' % name)
# 小明是班上学习最好的同学

# %：占位符。
# s：将变量（数据类型）转换为字符串放入占位的地方。
# %s 是一个字符串格式化的占位符，用于表示在字符串中的某个位置应该被替换为字符串值。


# 占位符通常以百分号（%）开头，后跟一个字母，代表不同的数据类型。
# %d,%s,%f将内容转换成 整型，字符串，浮点型，放入占位的地方。
# (1)%d %f 只能接收传过来的是数值类型
print('输出：%d' % 10)
print('输出：%d' % True)
print('输出：%d' % 1.67)
# 输出：10
# 输出：1  True转换为整型就是1，False转换为整型0
# 输出：1  浮点类型转换为整型，会失去小数部分（不考虑四舍五入）

# print('输出：%d' % '100')
# TypeError: %d format: a number is required, not str

print('输出：%f' % 10)
print('输出：%f' % True)
print('输出：%f' % 1.67)
# 输出：10.000000
# 输出：1.000000
# 输出：1.670000
# 默认保留六位小数

# print('输出：%f' % '100')
# TypeError: must be real number, not str

# %s 可以接受传过来任意类型的值
print('输出：%s' % 10)
print('输出：%s' % True)  # 转换为字符串：'True'
print('输出：%s' % 1.67)
print('输出：%s' % '100')
# 输出：10
# 输出：True
# 输出：1.67
# 输出：100


print('%s' % 1.2)
print('%s %d' % (1.2, 6))  # 如果前面占的位置超过一个，传入的数据就需要使用括号包围起来。
# print('%s %d' % 1.2, 6)

# print('%d %s %f' % (1, 2))
# print('%d %s %f' % (1, 2, 3, 4))
# 前面占了几个位置，后面的括号里面就要传几个值，多了少了都会报错。

# 第一个值给到第一个占位的地方，第二值给到第二个占位的地方，以此类推。

# 2、宽度、精度控制
# 可以使用辅助符号“m.n”来控制数据的宽度和精度。
# m：控制宽度，要求是数字（很少使用），设置宽度小于数字自身，不生效。
# n：控制小数点精度，要求是数字，小数部分会进行四舍五入。

# %5d:将数据的宽度控制在5位
print('输出：%5d' % 123)
# 输出：  123
# 123数据宽度是3，少了宽度前面就会补空格。

print('输出：%5d' % 123456)
# 当设置宽度小于数字自身，不生效。原样输出
# 输出：123456

# %6s:将传入的数据先转换为字符串类型，数据宽度设置在6位。
print('输出：%6s' % 12345)
# 输出： 12345

# %5.2f :宽度控制在五位，精度在2位
print('输出：%5.2f' % 1.2)
# 输出： 1.20

print('输出：%5.2f' % 12345)
# 输出：12345.00

# %.3f:宽度不限制，精度在3位
print('输出：%.3f' % 12)
print('输出：%.3f' % 12.5)
print('输出：%.3f' % 12.56)
print('输出：%.3f' % 12.5678)  # 会四舍五入
# 输出：12.000
# 输出：12.500
# 输出：12.560
# 输出：12.568

# 3、f-strings
# 语法：f"内容{变量}"
# 是 Python 3.6 中引入的新特性，它允许在字符串前添加 f/F 前缀，并在字符串中使用 `{}` 来标明要占位的内容。
# 需求：输出小明的年龄是18
name = '小明'
age = 18
print(f'{name}的年龄是{age}.')
print(f'{"小明"}的年龄是{18}.')

# 尊敬的用户，您好：恭喜你于XX在小店成功充值XX元，余额XX元。本店每一位员工竭诚为你服务！地址：XX。
supermarket = '步步高'
date = '2025年3月4日'
balance = 50
top_up = 500  # 充值
balance = balance + top_up  # 550
address = '湖南省长沙市xxxx'

print(
    f' 【{supermarket}超市】尊敬的用户，您好：恭喜你于{date}成功充值{top_up}元，余额{balance}元。本店每一位员工竭诚为你服务！地址：{address}。')

print('%4.1f' % 12)

print(f'{12:6.1f}')
# 12.0
#   12.0

# f-string特点：
# (1)不理会类型；
# (2)如果不做精度控制，会原样输出；
# (3)填充的内容不仅仅只针对变量，数值或者字符串，表达式也可以；
# (4){}中不允许出现\

# 同学们容易出错的点：
# （1）使用百分号格式化输出的时候少了百分号；
# print('%s' % (1, 2))
# print('%s %d'(1, 2))

# （2）占位的时候，如果需要传递多个数据，多个数据要用小括号包围起来；

# （3）使用f-string格式化时，少写了一个f或{}.

# 练习题：请编写程序, 使用变量保存自己的名字，年龄，身高，体重，并且打印输出。（要求使用%和f-string的方法分别输出）


